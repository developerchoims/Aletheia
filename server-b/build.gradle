plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.3'
    id 'io.spring.dependency-management' version '1.1.6'
    id 'com.google.protobuf' version '0.9.1'
}

group = 'com.geumbang'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-security'

    // gRPC 및 Protobuf 의존성
    implementation 'io.grpc:grpc-netty-shaded:1.54.0'  // gRPC 통신용 네티(Netty) 서버
    implementation 'io.grpc:grpc-protobuf:1.54.0'      // gRPC와 protobuf 연동
    implementation 'io.grpc:grpc-stub:1.54.0'          // gRPC 스텁 생성
    implementation "com.google.protobuf:protobuf-java:3.21.12"
    implementation 'javax.annotation:javax.annotation-api:1.3.2'

    // JWT
    implementation 'io.jsonwebtoken:jjwt-api:0.11.2'
    implementation 'io.jsonwebtoken:jjwt-impl:0.11.2'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.2'

    // Lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // Swagger
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.2'

    // 테스트 관련 의존성
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.10.0'
}

tasks.processResources {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE // 중복 파일을 제외하고 처리
}

tasks.withType(JavaCompile).configureEach {
    doFirst {
        delete fileTree(dir: 'build/generated/**', include: '**/AuthServiceGrpc*.java')
    }
}

protobuf {
    protoc {
        artifact = 'com.google.protobuf:protoc:3.21.12'  // Protoc 컴파일러 버전
    }
    plugins {
        grpc {
            artifact = 'io.grpc:protoc-gen-grpc-java:1.54.0'  // gRPC Java 플러그인
        }
    }
    generateProtoTasks {
        all().forEach { task ->
            task.plugins {
                grpc {}  // gRPC 플러그인 활성화
            }
        }
    }
}


sourceSets {
    main {
        proto {
            srcDir 'src/main/proto'
        }
        java {
            // gRPC 및 protobuf에서 생성된 파일들의 경로 설정
            srcDirs = ['src/main/java','build/generated/source/proto/main/java', 'build/generated/source/proto/main/grpc']
        }
    }
}

tasks.named('compileJava') {
    dependsOn 'generateProto'
}

